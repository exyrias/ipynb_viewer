data:text/html, <!DOCTYPE html> <html> <head> <title>ipynb Viewer</title> <style type="text/css"> .cell { display: flex; flex-direction: column; } .input { display: flex; } .output { display: flex; } .prompt { font-size: 12px; text-align: right; margin: 5px; padding: 3px; width: 90px; flex-shrink: 0; } .box { margin: 5px; padding: 3px; } .code { background-color: rgb(247, 247, 247); border: solid; border-radius: 2px; border-color: rgb(207, 207, 207); border-width: 1px; flex-grow: 1; } .output-holder { flex-grow: 1; display: flex; flex-direction: column; } .outputtable table { font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; margin-left: 0; margin-right: 0; border: none; border-collapse: collapse; border-spacing: 0; color: black; font-size: 12px; table-layout: fixed; } .outputtable thead { border-bottom: 1px solid black; } .outputtable tr, .outputtable th, .outputtable td { text-align: right; padding: 0.5em 0.5em; } .outputtable tbody tr:nth-child(odd) { background: rgb(245, 245, 245); } </style> </head> <body> <input type="file" id="inputfile" /> <div id="imgarea"></div> <script> const setTextElement = ((elm, text) => { text = text.replace(/\u001b\[[\d;]*\dm/g, ''); elm.appendChild(document.createTextNode(text)); }); const createPrompt = ((type, num) => { const elm = document.createElement("pre"); elm.className = "prompt"; num = (num === null) ? "" : num; elm.innerHTML = (type === "in" ? "In " : "Out") + "[" + num + "]"; return elm; }); const createInput = ((cell) => { const elm_input = document.createElement("div"); elm_input.className = "input"; elm_input.appendChild(createPrompt("in", cell.execution_count)); const elm_source = document.createElement("pre"); elm_source.className = "code box"; setTextElement(elm_source, cell.source.join("")); elm_input.appendChild(elm_source); return elm_input; }); const createOutputText = ((dat) => { const elm = document.createElement("pre"); elm.className = "outputtext box"; setTextElement(elm, dat.text.join("")); return elm; }); const createOutputImage = ((dat) => { const elm = document.createElement("div"); elm.className = "outputimg box"; const elm_small_btn = document.createElement("button"); const elm_big_btn = document.createElement("button"); elm_small_btn.innerHTML = "-"; elm_big_btn.innerHTML = "+"; elm.appendChild(elm_small_btn); elm.appendChild(elm_big_btn); elm.appendChild(document.createElement("br")); const elm_output_img = document.createElement("img"); let src="data:image/png;base64,"; src += dat.data["image/png"]; elm_output_img.src = src; elm.appendChild(elm_output_img); elm_small_btn.addEventListener('click', () => { let scale = elm_output_img.width / elm_output_img.naturalWidth; scale = scale < 0.1 ? scale : scale - 0.1; elm_output_img.width = scale * elm_output_img.naturalWidth; elm_output_img.height = scale * elm_output_img.naturalHeight; }); elm_big_btn.addEventListener('click', () => { let scale = elm_output_img.width / elm_output_img.naturalWidth; scale = scale > 10 ? scale : scale + 0.1; elm_output_img.width = scale * elm_output_img.naturalWidth; elm_output_img.height = scale * elm_output_img.naturalHeight; }); return elm; }); const createOutputHtmlResult = ((dat) => { const elm = document.createElement("div"); elm.className = "outputtable box"; elm.innerHTML = dat.data['text/html'].join(""); return elm; }); const createOutputTextResult = ((dat) => { const elm = document.createElement("pre"); elm.className = "outputtext box"; setTextElement(elm, dat.data['text/plain'].join("")); return elm; }); const createOutputError = ((dat) => { const elm = document.createElement("pre"); elm.className = "outputtext box"; setTextElement(elm, dat.traceback.join("")); return elm; }); const createOutput = ((cell) => { const elm_output = document.createElement("div"); elm_output.className = "output"; if (cell.outputs.length > 0) { elm_output.appendChild(createPrompt("out", cell.execution_count)); const elm_output_holder = document.createElement("div"); elm_output_holder.className = "output-holder"; elm_output.appendChild(elm_output_holder); cell.outputs.forEach(dat => { if (dat.output_type === "stream") { elm_output_holder.appendChild(createOutputText(dat)); } else if (dat.output_type === "display_data") { elm_output_holder.appendChild(createOutputImage(dat)); } else if (dat.output_type == "execute_result") { if (dat.data['text/html'] !== undefined) { elm_output_holder.appendChild(createOutputHtmlResult(dat)); } else { elm_output_holder.appendChild(createOutputTextResult(dat)); } } else if (dat.output_type == "error") { elm_output_holder.appendChild(createOutputError(dat)); } }); } return elm_output; }); const createCell = ((cell) => { const elm_cell = document.createElement("div"); elm_cell.className = "cell"; elm_cell.appendChild(createInput(cell)); elm_cell.appendChild(createOutput(cell)); return elm_cell; }); const inputFile = document.getElementById('inputfile'); const div = document.getElementById('imgarea'); inputFile.addEventListener('change', (e) => { while (div.firstChild) { div.removeChild(div.firstChild); } const reader = new FileReader(); reader.readAsText(e.target.files[0]); reader.onload = () => { const cells = JSON.parse(reader.result).cells; cells.forEach(cell => { div.appendChild(createCell(cell)); }); }; }, false); </script> </body> </html> 